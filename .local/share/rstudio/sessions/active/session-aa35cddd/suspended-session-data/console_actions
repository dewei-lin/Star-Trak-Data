{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        3,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2
    ],
    "data": [
        "\nR version 4.4.1 (2024-06-14) -- \"Race for Your Life\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cit",
        "e R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(readr)",
        "> ",
        "data <- read_csv(\"episode_word_counts.csv\")",
        "\u001B[1mRows: \u001B[22m\u001B[34m176\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m3149\u001B[39m\n\u001B[36mâ”€â”€\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”",
        "€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m    (1): Episode URL\n\u001B[32mdbl\u001B[39m (3148): captains, log, stardate, destination, planet, four, beyond, lies, great, mass, galaxy, orders, examine, farpoint, starbase, built, world, meanwhile, becoming...\n\n\u001B[36mâ„¹\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mâ„¹\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "View(data)",
        "> ",
        "View(data)",
        "> ",
        "library(tidyverse)",
        "â”€â”€ \u001B[1mAttaching core tidyverse packages\u001B[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\n\u001B[32mâœ”\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32mâœ”\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2\n\u001B[3",
        "2mâœ”\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32mâœ”\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32mâœ”\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.1     \u001B[32mâœ”\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32mâœ”\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32mâœ”\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\nâ”€â”€ \u001B[1mConflicts\u001B[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€",
        "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\n\u001B[31mâœ–\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31mâœ–\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mâ„¹\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(readr)",
        "> ",
        "library(tidyverse)",
        "> ",
        "data <- read_csv(\"episode_word_counts.csv\")",
        "\u001B[1mRows: \u001B[22m\u001B[34m176\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m3149\u001B[39m\n\u001B[36mâ”€â”€\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”",
        "€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m    (1): Episode URL\n\u001B[32mdbl\u001B[39m (3148): captains, log, stardate, destination, planet, four, beyond, lies, great, mass, galaxy, orders, examine, farpoint, starbase, built, world, meanwhile, becoming...\n\n\u001B[36mâ„¹\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mâ„¹\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "long_data <- data %>%",
        "+ ",
        "  pivot_longer(cols = -`Episode URL`, names_to = \"word\", values_to = \"count\")",
        "> ",
        "View(long_data)",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- total_counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count))",
        "Error: object 'total_counts' not found\n",
        "> ",
        "View(long_data)",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(count > 1000) %>%",
        "+ ",
        "  arrange(desc(count))",
        "\u001B[1m\u001B[33mError\u001B[39m in `filter()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `count > 1000`.\u001B[39m\n\u001B[1mCaused by error in `count > 1000`:\u001B[22m\n\u001B[33m!\u001B[39m comparison (>) is possible only for atomic and list types\nBacktrace:\n\u001B[90m 1. \u001B[39mcounts %>% filter(count > 1000) %>% arrange(desc(count))\n\u001B[90m 4. \u001B[39m\u001B[1m\u001B[94mdplyr:::filter.data.frame(\u001B[39m\u001B[22m., count > 1000\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n\u001B[90m 5. \u001B[39mdplyr:::filter_rows(.data, dots, by)\n\u001B[90m 6. \u001B[39mdplyr:::filter_eval(...)\n\u001B[90m 8. \u001B[39mmask$eval_al",
        "l_filter(dots, env_filter)\n\u001B[90m 9. \u001B[39m\u001B[1mdplyr\u001B[22m (local) eval()\n",
        "> ",
        "View(counts)",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count))",
        "> ",
        "> ",
        "ggplot(filtered_counts, aes(x = reorder(word, total_count), y = total_count)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  labs(title = \"Word Counts in the Corpus (Words with > 1000 Occurrences)\",",
        "+ ",
        "       x = \"Word\",",
        "+ ",
        "       y = \"Total Count\") +",
        "+ ",
        "  theme_minimal()",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count))",
        "> ",
        "> ",
        "ggplot(filtered_counts, aes(x = reorder(word, total_count), y = total_count)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  #coord_flip() +",
        "+ ",
        "  labs(title = \"Word Counts in the Corpus (Words with > 1000 Occurrences)\",",
        "+ ",
        "       x = \"Word\",",
        "+ ",
        "       y = \"Total Count\") +",
        "+ ",
        "  theme_minimal()",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(asc(total_count))",
        "\u001B[1m\u001B[33mError\u001B[39m in `arrange()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `..1 = asc(total_count)`.\u001B[39m\n\u001B[1mCaused by error in `asc()`:\u001B[22m\n\u001B[33m!\u001B[39m could not find function \"asc\"\nBacktrace:\n\u001B[90m  1. \u001B[39mcounts %>% filter(total_count > 1000) %>% ...\n\u001B[90m  3. \u001B[39m\u001B[1m\u001B[94mdplyr:::arrange.data.frame(\u001B[39m\u001B[22m., asc(total_count)\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n\u001B[90m  4. \u001B[39mdplyr:::arrange_rows(.data, dots = dots, locale = .locale)\n\u001B[90m  6. \u001B[39mdplyr:::mutate.data.frame(data, `:=`(\"{name}\", !!dot), ",
        ".keep = \"none\")\n\u001B[90m  7. \u001B[39mdplyr:::mutate_cols(.data, dplyr_quosures(...), by)\n\u001B[90m  9. \u001B[39mdplyr:::mutate_col(dots[[i]], data, mask, new_columns)\n\u001B[90m 10. \u001B[39mmask$eval_all_mutate(quo)\n\u001B[90m 11. \u001B[39m\u001B[1mdplyr\u001B[22m (local) eval()\n",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(aesc(total_count))",
        "\u001B[1m\u001B[33mError\u001B[39m in `arrange()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `..1 = aesc(total_count)`.\u001B[39m\n\u001B[1mCaused by error in `aesc()`:\u001B[22m\n\u001B[33m!\u001B[39m could not find function \"aesc\"\nBacktrace:\n\u001B[90m  1. \u001B[39mcounts %>% filter(total_count > 1000) %>% ...\n\u001B[90m  3. \u001B[39m\u001B[1m\u001B[94mdplyr:::arrange.data.frame(\u001B[39m\u001B[22m., aesc(total_count)\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n\u001B[90m  4. \u001B[39mdplyr:::arrange_rows(.data, dots = dots, locale = .locale)\n\u001B[90m  6. \u001B[39mdplyr:::mutate.data.frame(data, `:=`(\"{name}\", !!do",
        "t), .keep = \"none\")\n\u001B[90m  7. \u001B[39mdplyr:::mutate_cols(.data, dplyr_quosures(...), by)\n\u001B[90m  9. \u001B[39mdplyr:::mutate_col(dots[[i]], data, mask, new_columns)\n\u001B[90m 10. \u001B[39mmask$eval_all_mutate(quo)\n\u001B[90m 11. \u001B[39m\u001B[1mdplyr\u001B[22m (local) eval()\n",
        "> ",
        "# Summarize the total count for each word across all episodes",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "# Filter for words that appear more than 1000 times",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count))  # Order by descending count",
        "> ",
        "> ",
        "# Plot histogram of word counts",
        "> ",
        "ggplot(filtered_counts, aes(x = reorder(word, -total_count), y = total_count)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  labs(title = \"Word Counts in the Corpus (Words with > 1000 Occurrences)\",",
        "+ ",
        "       x = \"Word\",",
        "+ ",
        "       y = \"Total Count\") +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels",
        "> ",
        "> ",
        "# Summarize the total count for each word across all episodes",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "# Filter for words that appear more than 1000 times",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count))  # Order by descending count",
        "> ",
        "> ",
        "# Plot histogram of word counts",
        "> ",
        "ggplot(filtered_counts, aes(x = reorder(word, -total_count), y = total_count)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  labs(title = \"Word Counts in the Corpus (Words with > 1000 Occurrences)\",",
        "+ ",
        "       x = \"Word\",",
        "+ ",
        "       y = \"Total Count\") +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels",
        "> ",
        "> ",
        "> ",
        "counts <- long_data %>%",
        "+ ",
        "  group_by(word) %>%",
        "+ ",
        "  summarize(total_count = sum(count)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "> ",
        "filtered_counts <- counts %>%",
        "+ ",
        "  filter(total_count > 1000) %>%",
        "+ ",
        "  arrange(desc(total_count)) ",
        "> ",
        "> ",
        "> ",
        "ggplot(filtered_counts, aes(x = reorder(word, -total_count), y = total_count)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  labs(title = \"Histogram of words count (Words with > 1000 Occurrences)\",",
        "+ ",
        "       x = \"Word\",",
        "+ ",
        "       y = \"Total Count\") +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 90, hjust = 1)) ",
        "> ",
        "> ",
        "> ",
        "numeric_data <- episode_counts %>%",
        "+ ",
        "  select(-`Episode URL`)",
        "Error: object 'episode_counts' not found\n",
        "> ",
        "> ",
        "numeric_data <- data %>%",
        "+ ",
        "  select(-`Episode URL`)",
        "> ",
        "pca_result <- prcomp(numeric_data, scale. = TRUE)",
        "> ",
        "> ",
        "> ",
        "pca_data <- as.data.frame(pca_result$x[, 1:2])",
        "> ",
        "colnames(pca_data) <- c(\"PC1\", \"PC2\")",
        "> ",
        "> ",
        "# Add episode labels back to the PCA data for context",
        "> ",
        "#pca_data$Episode_URL <- episode_counts$`Episode URL`",
        "> ",
        "> ",
        "# Plot the first two principal components",
        "> ",
        "ggplot(pca_data, aes(x = PC1, y = PC2)) +",
        "+ ",
        "  geom_point( alpha = 0.7) +",
        "+ ",
        "  labs(title = \"PCA of Episode Word Counts\",",
        "+ ",
        "       x = \"Principal Component 1\",",
        "+ ",
        "       y = \"Principal Component 2\") +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  theme(legend.position = \"none\")  # Hide legend for readability",
        "> ",
        "> ",
        "pca_data <- pca_data %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Episode_URL = data$`Episode URL`,",
        "+ ",
        "    most_frequent_character = character_data$most_frequent_character",
        "+ ",
        "  )",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `most_frequent_character = character_data$most_frequent_character`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'character_data' not found\nBacktrace:\n\u001B[90m 1. \u001B[39mpca_data %>% ...\n\u001B[90m 3. \u001B[39m\u001B[1m\u001B[94mdplyr:::mutate.data.frame(\u001B[39m\u001B[22m., Episode_URL = data$`Episode URL`, most_frequent_character = character_data$most_frequent_character\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n\u001B[90m 4. \u001B[39mdplyr:::mutate_cols(.data, dplyr_quosures(...)",
        ", by)\n\u001B[90m 6. \u001B[39mdplyr:::mutate_col(dots[[i]], data, mask, new_columns)\n\u001B[90m 7. \u001B[39mmask$eval_all_mutate(quo)\n\u001B[90m 8. \u001B[39m\u001B[1mdplyr\u001B[22m (local) eval()\n",
        "> ",
        "character_data <- data %>%",
        "+ ",
        "  select(`Episode URL`, picard, riker, data, troi, worf, crusher)",
        "> ",
        "> ",
        "# Identify the most frequent character for each episode",
        "> ",
        "character_data <- character_data %>%",
        "+ ",
        "  rowwise() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    most_frequent_character = names(which.max(c_across(picard:crusher)))",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "# Join this character information with the PCA results",
        "> ",
        "numeric_data <- data %>% select(-`Episode URL`)  # Remove non-numeric column",
        "> ",
        "pca_result <- prcomp(numeric_data, scale. = TRUE)  # Perform PCA",
        "> ",
        "pca_data <- as.data.frame(pca_result$x[, 1:2])  # Extract first two principal components",
        "> ",
        "colnames(pca_data) <- c(\"PC1\", \"PC2\")",
        "> ",
        "> ",
        "# Add episode labels and character information to PCA data",
        "> ",
        "pca_data <- pca_data %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Episode_URL = data$`Episode URL`,",
        "+ ",
        "    most_frequent_character = character_data$most_frequent_character",
        "+ ",
        "  )",
        "Warning: \u001B[38;5;232mThere was 1 warning in `mutate()`.\u001B[39m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `most_frequent_character = character_data$most_frequent_character`.\u001B[39m\nCaused by warning:\n\u001B[33m!\u001B[39m Unknown or uninitialised column: `most_frequent_character`.\n",
        "> ",
        "> ",
        "# Plot PCA with color coding based on most frequent character",
        "> ",
        "ggplot(pca_data, aes(x = PC1, y = PC2, color = most_frequent_character)) +",
        "+ ",
        "  geom_point(alpha = 0.7) +",
        "+ ",
        "  labs(title = \"PCA of Episode Word Counts by Most Frequent Character\",",
        "+ ",
        "       x = \"Principal Component 1\",",
        "+ ",
        "       y = \"Principal Component 2\",",
        "+ ",
        "       color = \"Most Frequent Character\") +",
        "+ ",
        "  theme_minimal()",
        "\u001B[1m\u001B[33mError\u001B[39m in `geom_point()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mâ„¹\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'most_frequent_character' not found\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m  2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m  4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m  5. \u001B[39mggplot2:::by_layer(...)\n\u001B[90m 12. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m 13. \u001B[3",
        "9ml$compute_aesthetics(d, plot)\n\u001B[90m 14. \u001B[39mggplot2 (local) compute_aesthetics(..., self = self)\n\u001B[90m 15. \u001B[39m\u001B[1mbase\u001B[22m::lapply(aesthetics, eval_tidy, data = data, env = env)\n\u001B[90m 16. \u001B[39m\u001B[1mrlang\u001B[22m (local) FUN(X[[i]], ...)\n",
        "> ",
        "character_data <- data %>%",
        "+ ",
        "  select(`Episode URL`, picard, riker, data, troi, worf, crusher)",
        "> ",
        "> ",
        "# Identify the most frequent character for each episode",
        "> ",
        "character_data <- character_data %>%",
        "+ ",
        "  rowwise() %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    most_frequent_character = names(which.max(c_across(picard:crusher)))",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "# Join this character information with the PCA results",
        "> ",
        "# Remove the non-numeric column `Episode URL` to prepare for PCA",
        "> ",
        "numeric_data <- data %>% select(-`Episode URL`)",
        "> ",
        "> ",
        "# Perform PCA",
        "> ",
        "pca_result <- prcomp(numeric_data, scale. = TRUE)  # Scaling ensures all variables contribute equally",
        "> ",
        "pca_data <- as.data.frame(pca_result$x[, 1:2])  # Extract the first two principal components",
        "> ",
        "colnames(pca_data) <- c(\"PC1\", \"PC2\")",
        "> ",
        "> ",
        "# Add episode labels and character information to PCA data",
        "> ",
        "# Ensure that we correctly add `Episode URL` and `most_frequent_character`",
        "> ",
        "pca_data <- pca_data %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Episode_URL = data$`Episode URL`,",
        "+ ",
        "    most_frequent_character = character_data$most_frequent_character",
        "+ ",
        "  )",
        "Warning: \u001B[38;5;232mThere was 1 warning in `mutate()`.\u001B[39m\n\u001B[38;5;232m\u001B[36mâ„¹\u001B[38;5;232m In argument: `most_frequent_character = character_data$most_frequent_character`.\u001B[39m\nCaused by warning:\n\u001B[33m!\u001B[39m Unknown or uninitialised column: `most_frequent_character`.\n",
        "> ",
        "> ",
        "# Plot PCA with color coding based on most frequent character",
        "> ",
        "ggplot(pca_data, aes(x = PC1, y = PC2, color = most_frequent_character)) +",
        "+ ",
        "  geom_point(alpha = 0.7) +",
        "+ ",
        "  labs(title = \"PCA of Episode Word Counts by Most Frequent Character\",",
        "+ ",
        "       x = \"Principal Component 1\",",
        "+ ",
        "       y = \"Principal Component 2\",",
        "+ ",
        "       color = \"Most Frequent Character\") +",
        "+ ",
        "  theme_minimal()",
        "\u001B[1m\u001B[33mError\u001B[39m in `geom_point()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mâ„¹\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'most_frequent_character' not found\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m  2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m  4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m  5. \u001B[39mggplot2:::by_layer(...)\n\u001B[90m 12. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m 13. \u001B[3",
        "9ml$compute_aesthetics(d, plot)\n\u001B[90m 14. \u001B[39mggplot2 (local) compute_aesthetics(..., self = self)\n\u001B[90m 15. \u001B[39m\u001B[1mbase\u001B[22m::lapply(aesthetics, eval_tidy, data = data, env = env)\n\u001B[90m 16. \u001B[39m\u001B[1mrlang\u001B[22m (local) FUN(X[[i]], ...)\n"
    ]
}